
mid_term.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e4  080025e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080025e4  080025e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e4  080025e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080025ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000010  080025fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080025fc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000935a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b43  00000000  00000000  00029393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002aed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f44  00000000  00000000  0002c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf4e  00000000  00000000  0004324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082450  00000000  00000000  0004f19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d15ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  000d1640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080025ac 	.word	0x080025ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080025ac 	.word	0x080025ac

0800014c <iKeyInput>:
static int flagForButtonPressed3s[NO_OF_BUTTONS]		= {0,0,0};

static int counterForButtonPressed3s[NO_OF_BUTTONS]		= {0,0,0};
static int counterForButtonDoublePressed[NO_OF_BUTTONS]	= {0,0,0};

GPIO_PinState iKeyInput(int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(index){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b02      	cmp	r3, #2
 8000158:	d015      	beq.n	8000186 <iKeyInput+0x3a>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b02      	cmp	r3, #2
 800015e:	dc18      	bgt.n	8000192 <iKeyInput+0x46>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d003      	beq.n	800016e <iKeyInput+0x22>
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2b01      	cmp	r3, #1
 800016a:	d006      	beq.n	800017a <iKeyInput+0x2e>
 800016c:	e011      	b.n	8000192 <iKeyInput+0x46>
		case 0:
			return HAL_GPIO_ReadPin(A0_GPIO_Port,A0_Pin);
 800016e:	2101      	movs	r1, #1
 8000170:	480a      	ldr	r0, [pc, #40]	; (800019c <iKeyInput+0x50>)
 8000172:	f001 f9db 	bl	800152c <HAL_GPIO_ReadPin>
 8000176:	4603      	mov	r3, r0
 8000178:	e00c      	b.n	8000194 <iKeyInput+0x48>
		case 1:
			return HAL_GPIO_ReadPin(A1_GPIO_Port,A1_Pin);
 800017a:	2102      	movs	r1, #2
 800017c:	4807      	ldr	r0, [pc, #28]	; (800019c <iKeyInput+0x50>)
 800017e:	f001 f9d5 	bl	800152c <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	e006      	b.n	8000194 <iKeyInput+0x48>
		case 2:
			return HAL_GPIO_ReadPin(A2_GPIO_Port,A2_Pin);
 8000186:	2104      	movs	r1, #4
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <iKeyInput+0x50>)
 800018a:	f001 f9cf 	bl	800152c <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	e000      	b.n	8000194 <iKeyInput+0x48>
		default:
			return NORMAL_STATE;
 8000192:	2301      	movs	r3, #1
	}
}
 8000194:	4618      	mov	r0, r3
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010800 	.word	0x40010800

080001a0 <subKeyProcess1>:

void subKeyProcess1(int index){
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 80001a8:	4a15      	ldr	r2, [pc, #84]	; (8000200 <subKeyProcess1+0x60>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2101      	movs	r1, #1
 80001ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(counterForButtonDoublePressed[index] == 0 || counterForButtonDoublePressed[index] == DURATION_FOR_DOUBLE_CLICK){
 80001b2:	4a14      	ldr	r2, [pc, #80]	; (8000204 <subKeyProcess1+0x64>)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d005      	beq.n	80001ca <subKeyProcess1+0x2a>
 80001be:	4a11      	ldr	r2, [pc, #68]	; (8000204 <subKeyProcess1+0x64>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c6:	2b64      	cmp	r3, #100	; 0x64
 80001c8:	d104      	bne.n	80001d4 <subKeyProcess1+0x34>
		flagForButtonDoublePressed[index] = 1;
 80001ca:	4a0f      	ldr	r2, [pc, #60]	; (8000208 <subKeyProcess1+0x68>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2101      	movs	r1, #1
 80001d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	if(counterForButtonDoublePressed[index] > 0 && counterForButtonDoublePressed[index] < DURATION_FOR_DOUBLE_CLICK){
 80001d4:	4a0b      	ldr	r2, [pc, #44]	; (8000204 <subKeyProcess1+0x64>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	dd0a      	ble.n	80001f6 <subKeyProcess1+0x56>
 80001e0:	4a08      	ldr	r2, [pc, #32]	; (8000204 <subKeyProcess1+0x64>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	2b63      	cmp	r3, #99	; 0x63
 80001ea:	dc04      	bgt.n	80001f6 <subKeyProcess1+0x56>
		flagForButtonDoublePressed[index]=2;
 80001ec:	4a06      	ldr	r2, [pc, #24]	; (8000208 <subKeyProcess1+0x68>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2102      	movs	r1, #2
 80001f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	20000038 	.word	0x20000038
 8000204:	20000068 	.word	0x20000068
 8000208:	20000044 	.word	0x20000044

0800020c <subKeyProcess2>:

void subKeyProcess2(int index){
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	flagForButtonPressed3s[index] = 1;
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <subKeyProcess2+0x1c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2101      	movs	r1, #1
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	20000050 	.word	0x20000050

0800022c <getKeyInput>:

void getKeyInput(){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	e096      	b.n	8000366 <getKeyInput+0x13a>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000238:	4a4f      	ldr	r2, [pc, #316]	; (8000378 <getKeyInput+0x14c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	7819      	ldrb	r1, [r3, #0]
 8000240:	4a4e      	ldr	r2, [pc, #312]	; (800037c <getKeyInput+0x150>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4413      	add	r3, r2
 8000246:	460a      	mov	r2, r1
 8000248:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 800024a:	4a4d      	ldr	r2, [pc, #308]	; (8000380 <getKeyInput+0x154>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	7819      	ldrb	r1, [r3, #0]
 8000252:	4a49      	ldr	r2, [pc, #292]	; (8000378 <getKeyInput+0x14c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	460a      	mov	r2, r1
 800025a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f7ff ff75 	bl	800014c <iKeyInput>
 8000262:	4603      	mov	r3, r0
 8000264:	4619      	mov	r1, r3
 8000266:	4a46      	ldr	r2, [pc, #280]	; (8000380 <getKeyInput+0x154>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4413      	add	r3, r2
 800026c:	460a      	mov	r2, r1
 800026e:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000270:	4a42      	ldr	r2, [pc, #264]	; (800037c <getKeyInput+0x150>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	493f      	ldr	r1, [pc, #252]	; (8000378 <getKeyInput+0x14c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	440b      	add	r3, r1
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d16d      	bne.n	8000360 <getKeyInput+0x134>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 8000284:	4a3e      	ldr	r2, [pc, #248]	; (8000380 <getKeyInput+0x154>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	493a      	ldr	r1, [pc, #232]	; (8000378 <getKeyInput+0x14c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	440b      	add	r3, r1
 8000292:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000294:	429a      	cmp	r2, r3
 8000296:	d163      	bne.n	8000360 <getKeyInput+0x134>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000298:	4a3a      	ldr	r2, [pc, #232]	; (8000384 <getKeyInput+0x158>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4413      	add	r3, r2
 800029e:	781a      	ldrb	r2, [r3, #0]
 80002a0:	4936      	ldr	r1, [pc, #216]	; (800037c <getKeyInput+0x150>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	440b      	add	r3, r1
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d01d      	beq.n	80002e8 <getKeyInput+0xbc>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 80002ac:	4a33      	ldr	r2, [pc, #204]	; (800037c <getKeyInput+0x150>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	7819      	ldrb	r1, [r3, #0]
 80002b4:	4a33      	ldr	r2, [pc, #204]	; (8000384 <getKeyInput+0x158>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	460a      	mov	r2, r1
 80002bc:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 80002be:	4a2f      	ldr	r2, [pc, #188]	; (800037c <getKeyInput+0x150>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d14a      	bne.n	8000360 <getKeyInput+0x134>
					subKeyProcess1(i);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f7ff ff68 	bl	80001a0 <subKeyProcess1>
					counterForButtonPressed3s[i] = DURATION_FOR_AUTO_INCREASING_3S;
 80002d0:	4a2d      	ldr	r2, [pc, #180]	; (8000388 <getKeyInput+0x15c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonDoublePressed[i] = DURATION_FOR_DOUBLE_CLICK;
 80002dc:	4a2b      	ldr	r2, [pc, #172]	; (800038c <getKeyInput+0x160>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2164      	movs	r1, #100	; 0x64
 80002e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e6:	e03b      	b.n	8000360 <getKeyInput+0x134>
				}
			}else{

				if(flagForButtonDoublePressed[i] == 1){
 80002e8:	4a29      	ldr	r2, [pc, #164]	; (8000390 <getKeyInput+0x164>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d118      	bne.n	8000326 <getKeyInput+0xfa>
					counterForButtonDoublePressed[i]--;
 80002f4:	4a25      	ldr	r2, [pc, #148]	; (800038c <getKeyInput+0x160>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fc:	1e5a      	subs	r2, r3, #1
 80002fe:	4923      	ldr	r1, [pc, #140]	; (800038c <getKeyInput+0x160>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(counterForButtonDoublePressed[i]<=0){
 8000306:	4a21      	ldr	r2, [pc, #132]	; (800038c <getKeyInput+0x160>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	2b00      	cmp	r3, #0
 8000310:	dc09      	bgt.n	8000326 <getKeyInput+0xfa>
						counterForButtonDoublePressed[i] = DURATION_FOR_DOUBLE_CLICK;
 8000312:	4a1e      	ldr	r2, [pc, #120]	; (800038c <getKeyInput+0x160>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2164      	movs	r1, #100	; 0x64
 8000318:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flagForButtonDoublePressed[i] = 0;
 800031c:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <getKeyInput+0x164>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2100      	movs	r1, #0
 8000322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
				}


				counterForButtonPressed3s[i]--;
 8000326:	4a18      	ldr	r2, [pc, #96]	; (8000388 <getKeyInput+0x15c>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032e:	1e5a      	subs	r2, r3, #1
 8000330:	4915      	ldr	r1, [pc, #84]	; (8000388 <getKeyInput+0x15c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(counterForButtonPressed3s[i] <= 0){
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <getKeyInput+0x15c>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	2b00      	cmp	r3, #0
 8000342:	dc0d      	bgt.n	8000360 <getKeyInput+0x134>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <getKeyInput+0x150>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <getKeyInput+0x12a>
						subKeyProcess2(i);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff5b 	bl	800020c <subKeyProcess2>
					}

					counterForButtonPressed3s[i] = DURATION_FOR_AUTO_INCREASING_1S;
 8000356:	4a0c      	ldr	r2, [pc, #48]	; (8000388 <getKeyInput+0x15c>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2164      	movs	r1, #100	; 0x64
 800035c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3301      	adds	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	f77f af65 	ble.w	8000238 <getKeyInput+0xc>
				}

			}
		}
	}
}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000002c 	.word	0x2000002c
 800037c:	20000030 	.word	0x20000030
 8000380:	20000034 	.word	0x20000034
 8000384:	20000000 	.word	0x20000000
 8000388:	2000005c 	.word	0x2000005c
 800038c:	20000068 	.word	0x20000068
 8000390:	20000044 	.word	0x20000044

08000394 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d901      	bls.n	80003a8 <is_button_pressed+0x14>
 80003a4:	2300      	movs	r3, #0
 80003a6:	e00d      	b.n	80003c4 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <is_button_pressed+0x3c>)
 80003ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d106      	bne.n	80003c2 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <is_button_pressed+0x3c>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	e000      	b.n	80003c4 <is_button_pressed+0x30>
		}
		return 0;
 80003c2:	2300      	movs	r3, #0
	}
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000038 	.word	0x20000038

080003d4 <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(unsigned char button_number){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d901      	bls.n	80003e8 <is_button_pressed_3s+0x14>
 80003e4:	23ff      	movs	r3, #255	; 0xff
 80003e6:	e00d      	b.n	8000404 <is_button_pressed_3s+0x30>
	else {
			if(flagForButtonPressed3s[button_number] == 1){
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <is_button_pressed_3s+0x3c>)
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d106      	bne.n	8000402 <is_button_pressed_3s+0x2e>
				flagForButtonPressed3s[button_number] = 0;
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <is_button_pressed_3s+0x3c>)
 80003f8:	2100      	movs	r1, #0
 80003fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				return 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <is_button_pressed_3s+0x30>
			}
			return 0;
 8000402:	2300      	movs	r3, #0
		}
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000050 	.word	0x20000050

08000414 <check_counter>:
			}
			return 0;
		}
}

void check_counter(){
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	if(counter>=10) counter = 0;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <check_counter+0x2c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b09      	cmp	r3, #9
 800041e:	dd03      	ble.n	8000428 <check_counter+0x14>
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <check_counter+0x2c>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
	else if(counter<=0) counter = 9;
}
 8000426:	e006      	b.n	8000436 <check_counter+0x22>
	else if(counter<=0) counter = 9;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <check_counter+0x2c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dc02      	bgt.n	8000436 <check_counter+0x22>
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <check_counter+0x2c>)
 8000432:	2209      	movs	r2, #9
 8000434:	601a      	str	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000078 	.word	0x20000078

08000444 <fsm_auto_run>:
 */

#include "fsm_auto.h"
#include "timer_task.h"

void fsm_auto_run(){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	switch(status){
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <fsm_auto_run+0xb0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d002      	beq.n	8000456 <fsm_auto_run+0x12>
 8000450:	2b1e      	cmp	r3, #30
 8000452:	d00c      	beq.n	800046e <fsm_auto_run+0x2a>
//				}

				break;

			default:
				break;
 8000454:	e04b      	b.n	80004ee <fsm_auto_run+0xaa>
				clearLED();
 8000456:	f000 fadd 	bl	8000a14 <clearLED>
				counter = 0;
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <fsm_auto_run+0xb4>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 8000460:	2064      	movs	r0, #100	; 0x64
 8000462:	f000 fbf9 	bl	8000c58 <setTimer1>
				status = AUTO_STATE;
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <fsm_auto_run+0xb0>)
 8000468:	221e      	movs	r2, #30
 800046a:	601a      	str	r2, [r3, #0]
				break;
 800046c:	e03f      	b.n	80004ee <fsm_auto_run+0xaa>
				displayNum(counter);
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <fsm_auto_run+0xb4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f90e 	bl	8000694 <displayNum>
				count_down();
 8000478:	f000 fd32 	bl	8000ee0 <count_down>
				if( is_button_pressed(0) ){
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff ff89 	bl	8000394 <is_button_pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d00d      	beq.n	80004a4 <fsm_auto_run+0x60>
					counter += 1;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <fsm_auto_run+0xb4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <fsm_auto_run+0xb4>)
 8000490:	6013      	str	r3, [r2, #0]
					check_counter();
 8000492:	f7ff ffbf 	bl	8000414 <check_counter>
					setTimer5(EXPIRED_BUTTON_DURAION);
 8000496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049a:	f000 fc05 	bl	8000ca8 <setTimer5>
					status = INCREASE;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <fsm_auto_run+0xb0>)
 80004a0:	220c      	movs	r2, #12
 80004a2:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(1) ){
 80004a4:	2001      	movs	r0, #1
 80004a6:	f7ff ff75 	bl	8000394 <is_button_pressed>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00d      	beq.n	80004cc <fsm_auto_run+0x88>
					counter -= 1;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <fsm_auto_run+0xb4>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <fsm_auto_run+0xb4>)
 80004b8:	6013      	str	r3, [r2, #0]
					check_counter();
 80004ba:	f7ff ffab 	bl	8000414 <check_counter>
					setTimer5(EXPIRED_BUTTON_DURAION);
 80004be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c2:	f000 fbf1 	bl	8000ca8 <setTimer5>
					status = DECREASE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <fsm_auto_run+0xb0>)
 80004c8:	220d      	movs	r2, #13
 80004ca:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(2) ){
 80004cc:	2002      	movs	r0, #2
 80004ce:	f7ff ff61 	bl	8000394 <is_button_pressed>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d009      	beq.n	80004ec <fsm_auto_run+0xa8>
					counter = 0;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <fsm_auto_run+0xb4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
					setTimer5(EXPIRED_BUTTON_DURAION);
 80004de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e2:	f000 fbe1 	bl	8000ca8 <setTimer5>
					status = RESET_STATE;
 80004e6:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <fsm_auto_run+0xb0>)
 80004e8:	220b      	movs	r2, #11
 80004ea:	601a      	str	r2, [r3, #0]
				break;
 80004ec:	bf00      	nop
		}
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000074 	.word	0x20000074
 80004f8:	20000078 	.word	0x20000078

080004fc <fsm_simple_button_run>:
 */


#include "fsm_simple_button.h"

void fsm_simple_button_run(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

	switch(status){
 8000500:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <fsm_simple_button_run+0x17c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b0d      	cmp	r3, #13
 8000506:	d07b      	beq.n	8000600 <fsm_simple_button_run+0x104>
 8000508:	2b0d      	cmp	r3, #13
 800050a:	f300 80ab 	bgt.w	8000664 <fsm_simple_button_run+0x168>
 800050e:	2b0b      	cmp	r3, #11
 8000510:	d002      	beq.n	8000518 <fsm_simple_button_run+0x1c>
 8000512:	2b0c      	cmp	r3, #12
 8000514:	d042      	beq.n	800059c <fsm_simple_button_run+0xa0>


				break;

			default:
				break;
 8000516:	e0a5      	b.n	8000664 <fsm_simple_button_run+0x168>
				displayNum(counter);
 8000518:	4b58      	ldr	r3, [pc, #352]	; (800067c <fsm_simple_button_run+0x180>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f8b9 	bl	8000694 <displayNum>
				if( is_button_pressed(0) ){
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ff36 	bl	8000394 <is_button_pressed>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d009      	beq.n	8000542 <fsm_simple_button_run+0x46>
					counter += 1;
 800052e:	4b53      	ldr	r3, [pc, #332]	; (800067c <fsm_simple_button_run+0x180>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a51      	ldr	r2, [pc, #324]	; (800067c <fsm_simple_button_run+0x180>)
 8000536:	6013      	str	r3, [r2, #0]
					check_counter();
 8000538:	f7ff ff6c 	bl	8000414 <check_counter>
					status = INCREASE;
 800053c:	4b4e      	ldr	r3, [pc, #312]	; (8000678 <fsm_simple_button_run+0x17c>)
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(1) ){
 8000542:	2001      	movs	r0, #1
 8000544:	f7ff ff26 	bl	8000394 <is_button_pressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <fsm_simple_button_run+0x66>
					counter -= 1;
 800054e:	4b4b      	ldr	r3, [pc, #300]	; (800067c <fsm_simple_button_run+0x180>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a49      	ldr	r2, [pc, #292]	; (800067c <fsm_simple_button_run+0x180>)
 8000556:	6013      	str	r3, [r2, #0]
					check_counter();
 8000558:	f7ff ff5c 	bl	8000414 <check_counter>
					status = DECREASE;
 800055c:	4b46      	ldr	r3, [pc, #280]	; (8000678 <fsm_simple_button_run+0x17c>)
 800055e:	220d      	movs	r2, #13
 8000560:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(2) ){
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff ff16 	bl	8000394 <is_button_pressed>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d005      	beq.n	800057a <fsm_simple_button_run+0x7e>
					counter = 0;
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <fsm_simple_button_run+0x180>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
					status = RESET_STATE;
 8000574:	4b40      	ldr	r3, [pc, #256]	; (8000678 <fsm_simple_button_run+0x17c>)
 8000576:	220b      	movs	r2, #11
 8000578:	601a      	str	r2, [r3, #0]
				if( is_button_pressed_3s(0) ){
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ff2a 	bl	80003d4 <is_button_pressed_3s>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d070      	beq.n	8000668 <fsm_simple_button_run+0x16c>
					counter += 1;
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <fsm_simple_button_run+0x180>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a3b      	ldr	r2, [pc, #236]	; (800067c <fsm_simple_button_run+0x180>)
 800058e:	6013      	str	r3, [r2, #0]
					check_counter();
 8000590:	f7ff ff40 	bl	8000414 <check_counter>
					status = INCREASE;
 8000594:	4b38      	ldr	r3, [pc, #224]	; (8000678 <fsm_simple_button_run+0x17c>)
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
				break;
 800059a:	e065      	b.n	8000668 <fsm_simple_button_run+0x16c>
				displayNum(counter);
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <fsm_simple_button_run+0x180>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f877 	bl	8000694 <displayNum>
				if( is_button_pressed(0) ){
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff fef4 	bl	8000394 <is_button_pressed>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d009      	beq.n	80005c6 <fsm_simple_button_run+0xca>
					counter += 1;
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <fsm_simple_button_run+0x180>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a30      	ldr	r2, [pc, #192]	; (800067c <fsm_simple_button_run+0x180>)
 80005ba:	6013      	str	r3, [r2, #0]
					check_counter();
 80005bc:	f7ff ff2a 	bl	8000414 <check_counter>
					status = INCREASE;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <fsm_simple_button_run+0x17c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(1) ){
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fee4 	bl	8000394 <is_button_pressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d009      	beq.n	80005e6 <fsm_simple_button_run+0xea>
					counter -= 1;
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <fsm_simple_button_run+0x180>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <fsm_simple_button_run+0x180>)
 80005da:	6013      	str	r3, [r2, #0]
					check_counter();
 80005dc:	f7ff ff1a 	bl	8000414 <check_counter>
					status = DECREASE;
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <fsm_simple_button_run+0x17c>)
 80005e2:	220d      	movs	r2, #13
 80005e4:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(2) ){
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff fed4 	bl	8000394 <is_button_pressed>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d03c      	beq.n	800066c <fsm_simple_button_run+0x170>
					counter = 0;
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <fsm_simple_button_run+0x180>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
					status = RESET_STATE;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <fsm_simple_button_run+0x17c>)
 80005fa:	220b      	movs	r2, #11
 80005fc:	601a      	str	r2, [r3, #0]
				break;
 80005fe:	e035      	b.n	800066c <fsm_simple_button_run+0x170>
				displayNum(counter);
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <fsm_simple_button_run+0x180>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f845 	bl	8000694 <displayNum>
				if( is_button_pressed(0) ){
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff fec2 	bl	8000394 <is_button_pressed>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d009      	beq.n	800062a <fsm_simple_button_run+0x12e>
					counter += 1;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <fsm_simple_button_run+0x180>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <fsm_simple_button_run+0x180>)
 800061e:	6013      	str	r3, [r2, #0]
					check_counter();
 8000620:	f7ff fef8 	bl	8000414 <check_counter>
					status = INCREASE;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <fsm_simple_button_run+0x17c>)
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(1) ){
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff feb2 	bl	8000394 <is_button_pressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <fsm_simple_button_run+0x14e>
					counter -= 1;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <fsm_simple_button_run+0x180>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a0f      	ldr	r2, [pc, #60]	; (800067c <fsm_simple_button_run+0x180>)
 800063e:	6013      	str	r3, [r2, #0]
					check_counter();
 8000640:	f7ff fee8 	bl	8000414 <check_counter>
					status = DECREASE;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <fsm_simple_button_run+0x17c>)
 8000646:	220d      	movs	r2, #13
 8000648:	601a      	str	r2, [r3, #0]
				if( is_button_pressed(2) ){
 800064a:	2002      	movs	r0, #2
 800064c:	f7ff fea2 	bl	8000394 <is_button_pressed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00c      	beq.n	8000670 <fsm_simple_button_run+0x174>
					counter = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <fsm_simple_button_run+0x180>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
					status = RESET_STATE;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <fsm_simple_button_run+0x17c>)
 800065e:	220b      	movs	r2, #11
 8000660:	601a      	str	r2, [r3, #0]
				break;
 8000662:	e005      	b.n	8000670 <fsm_simple_button_run+0x174>
				break;
 8000664:	bf00      	nop
 8000666:	e004      	b.n	8000672 <fsm_simple_button_run+0x176>
				break;
 8000668:	bf00      	nop
 800066a:	e002      	b.n	8000672 <fsm_simple_button_run+0x176>
				break;
 800066c:	bf00      	nop
 800066e:	e000      	b.n	8000672 <fsm_simple_button_run+0x176>
				break;
 8000670:	bf00      	nop
		}

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000074 	.word	0x20000074
 800067c:	20000078 	.word	0x20000078

08000680 <toggleRed>:


#include "led.h"


void toggleRed(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(A5_GPIO_Port, A5_Pin);
 8000684:	2120      	movs	r1, #32
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <toggleRed+0x10>)
 8000688:	f000 ff7f 	bl	800158a <HAL_GPIO_TogglePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40010800 	.word	0x40010800

08000694 <displayNum>:

void displayNum(int num){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	switch(num%10){
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	4bc6      	ldr	r3, [pc, #792]	; (80009b8 <displayNum+0x324>)
 80006a0:	fb83 2301 	smull	r2, r3, r3, r1
 80006a4:	109a      	asrs	r2, r3, #2
 80006a6:	17cb      	asrs	r3, r1, #31
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1aca      	subs	r2, r1, r3
 80006b4:	2a09      	cmp	r2, #9
 80006b6:	f200 8183 	bhi.w	80009c0 <displayNum+0x32c>
 80006ba:	a301      	add	r3, pc, #4	; (adr r3, 80006c0 <displayNum+0x2c>)
 80006bc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80006c0:	080006e9 	.word	0x080006e9
 80006c4:	08000731 	.word	0x08000731
 80006c8:	08000779 	.word	0x08000779
 80006cc:	080007c1 	.word	0x080007c1
 80006d0:	08000809 	.word	0x08000809
 80006d4:	08000851 	.word	0x08000851
 80006d8:	08000899 	.word	0x08000899
 80006dc:	080008e1 	.word	0x080008e1
 80006e0:	08000929 	.word	0x08000929
 80006e4:	08000971 	.word	0x08000971
	case 0:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	48b3      	ldr	r0, [pc, #716]	; (80009bc <displayNum+0x328>)
 80006ee:	f000 ff34 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	48b1      	ldr	r0, [pc, #708]	; (80009bc <displayNum+0x328>)
 80006f8:	f000 ff2f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	48ae      	ldr	r0, [pc, #696]	; (80009bc <displayNum+0x328>)
 8000702:	f000 ff2a 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	48ac      	ldr	r0, [pc, #688]	; (80009bc <displayNum+0x328>)
 800070c:	f000 ff25 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	48a9      	ldr	r0, [pc, #676]	; (80009bc <displayNum+0x328>)
 8000716:	f000 ff20 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	48a7      	ldr	r0, [pc, #668]	; (80009bc <displayNum+0x328>)
 8000720:	f000 ff1b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	48a4      	ldr	r0, [pc, #656]	; (80009bc <displayNum+0x328>)
 800072a:	f000 ff16 	bl	800155a <HAL_GPIO_WritePin>
		break;
 800072e:	e16b      	b.n	8000a08 <displayNum+0x374>
	case 1:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	48a1      	ldr	r0, [pc, #644]	; (80009bc <displayNum+0x328>)
 8000736:	f000 ff10 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	489f      	ldr	r0, [pc, #636]	; (80009bc <displayNum+0x328>)
 8000740:	f000 ff0b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2104      	movs	r1, #4
 8000748:	489c      	ldr	r0, [pc, #624]	; (80009bc <displayNum+0x328>)
 800074a:	f000 ff06 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2108      	movs	r1, #8
 8000752:	489a      	ldr	r0, [pc, #616]	; (80009bc <displayNum+0x328>)
 8000754:	f000 ff01 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	4897      	ldr	r0, [pc, #604]	; (80009bc <displayNum+0x328>)
 800075e:	f000 fefc 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2120      	movs	r1, #32
 8000766:	4895      	ldr	r0, [pc, #596]	; (80009bc <displayNum+0x328>)
 8000768:	f000 fef7 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4892      	ldr	r0, [pc, #584]	; (80009bc <displayNum+0x328>)
 8000772:	f000 fef2 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000776:	e147      	b.n	8000a08 <displayNum+0x374>
	case 2:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	488f      	ldr	r0, [pc, #572]	; (80009bc <displayNum+0x328>)
 800077e:	f000 feec 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	488d      	ldr	r0, [pc, #564]	; (80009bc <displayNum+0x328>)
 8000788:	f000 fee7 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2104      	movs	r1, #4
 8000790:	488a      	ldr	r0, [pc, #552]	; (80009bc <displayNum+0x328>)
 8000792:	f000 fee2 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	4888      	ldr	r0, [pc, #544]	; (80009bc <displayNum+0x328>)
 800079c:	f000 fedd 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	4885      	ldr	r0, [pc, #532]	; (80009bc <displayNum+0x328>)
 80007a6:	f000 fed8 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	4883      	ldr	r0, [pc, #524]	; (80009bc <displayNum+0x328>)
 80007b0:	f000 fed3 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4880      	ldr	r0, [pc, #512]	; (80009bc <displayNum+0x328>)
 80007ba:	f000 fece 	bl	800155a <HAL_GPIO_WritePin>
		break;
 80007be:	e123      	b.n	8000a08 <displayNum+0x374>
	case 3:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	487d      	ldr	r0, [pc, #500]	; (80009bc <displayNum+0x328>)
 80007c6:	f000 fec8 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	487b      	ldr	r0, [pc, #492]	; (80009bc <displayNum+0x328>)
 80007d0:	f000 fec3 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	4878      	ldr	r0, [pc, #480]	; (80009bc <displayNum+0x328>)
 80007da:	f000 febe 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	4876      	ldr	r0, [pc, #472]	; (80009bc <displayNum+0x328>)
 80007e4:	f000 feb9 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	4873      	ldr	r0, [pc, #460]	; (80009bc <displayNum+0x328>)
 80007ee:	f000 feb4 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2120      	movs	r1, #32
 80007f6:	4871      	ldr	r0, [pc, #452]	; (80009bc <displayNum+0x328>)
 80007f8:	f000 feaf 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	486e      	ldr	r0, [pc, #440]	; (80009bc <displayNum+0x328>)
 8000802:	f000 feaa 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000806:	e0ff      	b.n	8000a08 <displayNum+0x374>
	case 4:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	486b      	ldr	r0, [pc, #428]	; (80009bc <displayNum+0x328>)
 800080e:	f000 fea4 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	4869      	ldr	r0, [pc, #420]	; (80009bc <displayNum+0x328>)
 8000818:	f000 fe9f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	4866      	ldr	r0, [pc, #408]	; (80009bc <displayNum+0x328>)
 8000822:	f000 fe9a 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2108      	movs	r1, #8
 800082a:	4864      	ldr	r0, [pc, #400]	; (80009bc <displayNum+0x328>)
 800082c:	f000 fe95 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	4861      	ldr	r0, [pc, #388]	; (80009bc <displayNum+0x328>)
 8000836:	f000 fe90 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	485f      	ldr	r0, [pc, #380]	; (80009bc <displayNum+0x328>)
 8000840:	f000 fe8b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	485c      	ldr	r0, [pc, #368]	; (80009bc <displayNum+0x328>)
 800084a:	f000 fe86 	bl	800155a <HAL_GPIO_WritePin>
		break;
 800084e:	e0db      	b.n	8000a08 <displayNum+0x374>
	case 5:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	4859      	ldr	r0, [pc, #356]	; (80009bc <displayNum+0x328>)
 8000856:	f000 fe80 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2102      	movs	r1, #2
 800085e:	4857      	ldr	r0, [pc, #348]	; (80009bc <displayNum+0x328>)
 8000860:	f000 fe7b 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	4854      	ldr	r0, [pc, #336]	; (80009bc <displayNum+0x328>)
 800086a:	f000 fe76 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	4852      	ldr	r0, [pc, #328]	; (80009bc <displayNum+0x328>)
 8000874:	f000 fe71 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	484f      	ldr	r0, [pc, #316]	; (80009bc <displayNum+0x328>)
 800087e:	f000 fe6c 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	484d      	ldr	r0, [pc, #308]	; (80009bc <displayNum+0x328>)
 8000888:	f000 fe67 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	484a      	ldr	r0, [pc, #296]	; (80009bc <displayNum+0x328>)
 8000892:	f000 fe62 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000896:	e0b7      	b.n	8000a08 <displayNum+0x374>
	case 6:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	4847      	ldr	r0, [pc, #284]	; (80009bc <displayNum+0x328>)
 800089e:	f000 fe5c 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2102      	movs	r1, #2
 80008a6:	4845      	ldr	r0, [pc, #276]	; (80009bc <displayNum+0x328>)
 80008a8:	f000 fe57 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	4842      	ldr	r0, [pc, #264]	; (80009bc <displayNum+0x328>)
 80008b2:	f000 fe52 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4840      	ldr	r0, [pc, #256]	; (80009bc <displayNum+0x328>)
 80008bc:	f000 fe4d 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2110      	movs	r1, #16
 80008c4:	483d      	ldr	r0, [pc, #244]	; (80009bc <displayNum+0x328>)
 80008c6:	f000 fe48 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	483b      	ldr	r0, [pc, #236]	; (80009bc <displayNum+0x328>)
 80008d0:	f000 fe43 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	4838      	ldr	r0, [pc, #224]	; (80009bc <displayNum+0x328>)
 80008da:	f000 fe3e 	bl	800155a <HAL_GPIO_WritePin>
		break;
 80008de:	e093      	b.n	8000a08 <displayNum+0x374>
	case 7:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	4835      	ldr	r0, [pc, #212]	; (80009bc <displayNum+0x328>)
 80008e6:	f000 fe38 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	4833      	ldr	r0, [pc, #204]	; (80009bc <displayNum+0x328>)
 80008f0:	f000 fe33 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	4830      	ldr	r0, [pc, #192]	; (80009bc <displayNum+0x328>)
 80008fa:	f000 fe2e 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2108      	movs	r1, #8
 8000902:	482e      	ldr	r0, [pc, #184]	; (80009bc <displayNum+0x328>)
 8000904:	f000 fe29 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	482b      	ldr	r0, [pc, #172]	; (80009bc <displayNum+0x328>)
 800090e:	f000 fe24 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2120      	movs	r1, #32
 8000916:	4829      	ldr	r0, [pc, #164]	; (80009bc <displayNum+0x328>)
 8000918:	f000 fe1f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	4826      	ldr	r0, [pc, #152]	; (80009bc <displayNum+0x328>)
 8000922:	f000 fe1a 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000926:	e06f      	b.n	8000a08 <displayNum+0x374>
	case 8:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	4823      	ldr	r0, [pc, #140]	; (80009bc <displayNum+0x328>)
 800092e:	f000 fe14 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2102      	movs	r1, #2
 8000936:	4821      	ldr	r0, [pc, #132]	; (80009bc <displayNum+0x328>)
 8000938:	f000 fe0f 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	481e      	ldr	r0, [pc, #120]	; (80009bc <displayNum+0x328>)
 8000942:	f000 fe0a 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	481c      	ldr	r0, [pc, #112]	; (80009bc <displayNum+0x328>)
 800094c:	f000 fe05 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2110      	movs	r1, #16
 8000954:	4819      	ldr	r0, [pc, #100]	; (80009bc <displayNum+0x328>)
 8000956:	f000 fe00 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	4817      	ldr	r0, [pc, #92]	; (80009bc <displayNum+0x328>)
 8000960:	f000 fdfb 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <displayNum+0x328>)
 800096a:	f000 fdf6 	bl	800155a <HAL_GPIO_WritePin>
		break;
 800096e:	e04b      	b.n	8000a08 <displayNum+0x374>
	case 9:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <displayNum+0x328>)
 8000976:	f000 fdf0 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	480f      	ldr	r0, [pc, #60]	; (80009bc <displayNum+0x328>)
 8000980:	f000 fdeb 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2104      	movs	r1, #4
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <displayNum+0x328>)
 800098a:	f000 fde6 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2108      	movs	r1, #8
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <displayNum+0x328>)
 8000994:	f000 fde1 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <displayNum+0x328>)
 800099e:	f000 fddc 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <displayNum+0x328>)
 80009a8:	f000 fdd7 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <displayNum+0x328>)
 80009b2:	f000 fdd2 	bl	800155a <HAL_GPIO_WritePin>
		break;
 80009b6:	e027      	b.n	8000a08 <displayNum+0x374>
 80009b8:	66666667 	.word	0x66666667
 80009bc:	40010c00 	.word	0x40010c00
	default:
		HAL_GPIO_WritePin(B0_GPIO_Port,B0_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <displayNum+0x37c>)
 80009c6:	f000 fdc8 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port,B1_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2102      	movs	r1, #2
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <displayNum+0x37c>)
 80009d0:	f000 fdc3 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2104      	movs	r1, #4
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <displayNum+0x37c>)
 80009da:	f000 fdbe 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port,B3_Pin, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2108      	movs	r1, #8
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <displayNum+0x37c>)
 80009e4:	f000 fdb9 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B4_GPIO_Port,B4_Pin, SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2110      	movs	r1, #16
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <displayNum+0x37c>)
 80009ee:	f000 fdb4 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B5_GPIO_Port,B5_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2120      	movs	r1, #32
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <displayNum+0x37c>)
 80009f8:	f000 fdaf 	bl	800155a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B6_GPIO_Port,B6_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <displayNum+0x37c>)
 8000a02:	f000 fdaa 	bl	800155a <HAL_GPIO_WritePin>
		break;
 8000a06:	bf00      	nop
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010c00 	.word	0x40010c00

08000a14 <clearLED>:

void clearLED(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	displayNum(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f7ff fe3b 	bl	8000694 <displayNum>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fa96 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f818 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f89e 	bl	8000b70 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a34:	f000 f850 	bl	8000ad8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <main+0x34>)
 8000a3a:	f001 f9f7 	bl	8001e2c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  	  //status initial:
  status = INIT;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <main+0x38>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]

  	  // count second:
  setTimer3(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f000 f91b 	bl	8000c80 <setTimer3>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //blink LED
	  blinkLED();
 8000a4a:	f000 fa39 	bl	8000ec0 <blinkLED>
	  //run fsm automatic
	  fsm_auto_run();
 8000a4e:	f7ff fcf9 	bl	8000444 <fsm_auto_run>
	  // run fsm of button
	  fsm_simple_button_run();
 8000a52:	f7ff fd53 	bl	80004fc <fsm_simple_button_run>
	  blinkLED();
 8000a56:	e7f8      	b.n	8000a4a <main+0x26>
 8000a58:	200000a4 	.word	0x200000a4
 8000a5c:	20000074 	.word	0x20000074

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fd94 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd90 	bl	80015bc <HAL_RCC_OscConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f8d3 	bl	8000c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fffc 	bl	8001abc <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aca:	f000 f8bf 	bl	8000c4c <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3740      	adds	r7, #64	; 0x40
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000afe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b1e:	f001 f935 	bl	8001d8c <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b28:	f000 f890 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b3a:	f001 facb 	bl	80020d4 <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b44:	f000 f882 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM2_Init+0x94>)
 8000b56:	f001 fc93 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 f874 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200000a4 	.word	0x200000a4

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_GPIO_Init+0xb8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <MX_GPIO_Init+0xb8>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xb8>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xb8>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <MX_GPIO_Init+0xb8>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_GPIO_Init+0xb8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A4_Pin|A5_Pin|A6_Pin|A7_Pin
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000bba:	481c      	ldr	r0, [pc, #112]	; (8000c2c <MX_GPIO_Init+0xbc>)
 8000bbc:	f000 fccd 	bl	800155a <HAL_GPIO_WritePin>
                          |A8_Pin|A9_Pin|A10_Pin|A11_Pin
                          |A12_Pin|A13_Pin|A14_Pin|A15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B0_Pin|B1_Pin|B2_Pin|B10_Pin
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bc6:	481a      	ldr	r0, [pc, #104]	; (8000c30 <MX_GPIO_Init+0xc0>)
 8000bc8:	f000 fcc7 	bl	800155a <HAL_GPIO_WritePin>
                          |B11_Pin|B12_Pin|B13_Pin|B14_Pin
                          |B15_Pin|B3_Pin|B4_Pin|B5_Pin
                          |B6_Pin|B7_Pin|B8_Pin|B9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_GPIO_Init+0xbc>)
 8000be0:	f000 fb2a 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : A4_Pin A5_Pin A6_Pin A7_Pin
                           A8_Pin A9_Pin A10_Pin A11_Pin
                           A12_Pin A13_Pin A14_Pin A15_Pin */
  GPIO_InitStruct.Pin = A4_Pin|A5_Pin|A6_Pin|A7_Pin
 8000be4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000be8:	60bb      	str	r3, [r7, #8]
                          |A8_Pin|A9_Pin|A10_Pin|A11_Pin
                          |A12_Pin|A13_Pin|A14_Pin|A15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_GPIO_Init+0xbc>)
 8000bfe:	f000 fb1b 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin B10_Pin
                           B11_Pin B12_Pin B13_Pin B14_Pin
                           B15_Pin B3_Pin B4_Pin B5_Pin
                           B6_Pin B7_Pin B8_Pin B9_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin|B10_Pin
 8000c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c06:	60bb      	str	r3, [r7, #8]
                          |B11_Pin|B12_Pin|B13_Pin|B14_Pin
                          |B15_Pin|B3_Pin|B4_Pin|B5_Pin
                          |B6_Pin|B7_Pin|B8_Pin|B9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_GPIO_Init+0xc0>)
 8000c1c:	f000 fb0c 	bl	8001238 <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	// run all timers
	getKeyInput();
 8000c3c:	f7ff faf6 	bl	800022c <getKeyInput>
	TimeRun();
 8000c40:	f000 f846 	bl	8000cd0 <TimeRun>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <setTimer1>:
int timer4_counter = 0;

int timer5_flag = 0;
int timer5_counter = 0;

void setTimer1(int duration){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <setTimer1+0x20>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <setTimer1+0x24>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000080 	.word	0x20000080
 8000c7c:	2000007c 	.word	0x2000007c

08000c80 <setTimer3>:
void setTimer2(int duration){
	timer2_counter = duration;
	timer2_flag =0;
}

void setTimer3(int duration){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <setTimer3+0x20>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
	timer3_flag =0;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <setTimer3+0x24>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000090 	.word	0x20000090
 8000ca4:	2000008c 	.word	0x2000008c

08000ca8 <setTimer5>:
void setTimer4(int duration){
	timer4_counter = duration;
	timer4_flag =0;
}

void setTimer5(int duration){
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <setTimer5+0x20>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
	timer5_flag =0;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <setTimer5+0x24>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200000a0 	.word	0x200000a0
 8000ccc:	2000009c 	.word	0x2000009c

08000cd0 <TimeRun>:
void clearTimer5(){
	timer5_counter = 0;
	timer5_flag = 0 ;
}

void TimeRun(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <TimeRun+0xac>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dd0b      	ble.n	8000cf4 <TimeRun+0x24>
		timer1_counter--;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <TimeRun+0xac>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <TimeRun+0xac>)
 8000ce4:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <TimeRun+0xac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	dc02      	bgt.n	8000cf4 <TimeRun+0x24>
			timer1_flag = 1;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <TimeRun+0xb0>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <TimeRun+0xb4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd0b      	ble.n	8000d14 <TimeRun+0x44>
		timer2_counter--;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <TimeRun+0xb4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <TimeRun+0xb4>)
 8000d04:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <TimeRun+0xb4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	dc02      	bgt.n	8000d14 <TimeRun+0x44>
			timer2_flag = 1;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <TimeRun+0xb8>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <TimeRun+0xbc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dd0b      	ble.n	8000d34 <TimeRun+0x64>
		timer3_counter--;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <TimeRun+0xbc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <TimeRun+0xbc>)
 8000d24:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <TimeRun+0xbc>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dc02      	bgt.n	8000d34 <TimeRun+0x64>
			timer3_flag = 1;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <TimeRun+0xc0>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <TimeRun+0xc4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	dd0b      	ble.n	8000d54 <TimeRun+0x84>
		timer4_counter--;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <TimeRun+0xc4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <TimeRun+0xc4>)
 8000d44:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0){
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <TimeRun+0xc4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dc02      	bgt.n	8000d54 <TimeRun+0x84>
			timer4_flag = 1;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <TimeRun+0xc8>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <TimeRun+0xcc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dd0b      	ble.n	8000d74 <TimeRun+0xa4>
		timer5_counter--;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <TimeRun+0xcc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <TimeRun+0xcc>)
 8000d64:	6013      	str	r3, [r2, #0]
		if(timer5_counter<=0){
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <TimeRun+0xcc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dc02      	bgt.n	8000d74 <TimeRun+0xa4>
			timer5_flag = 1;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <TimeRun+0xd0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000080 	.word	0x20000080
 8000d80:	2000007c 	.word	0x2000007c
 8000d84:	20000088 	.word	0x20000088
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	2000008c 	.word	0x2000008c
 8000d94:	20000098 	.word	0x20000098
 8000d98:	20000094 	.word	0x20000094
 8000d9c:	200000a0 	.word	0x200000a0
 8000da0:	2000009c 	.word	0x2000009c

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <HAL_MspInit+0x5c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_MspInit+0x60>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_MspInit+0x60>)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e18:	d113      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_TIM_Base_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 f9c7 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f000 f9e0 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr

08000e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e96:	f000 f8a5 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <TIM2_IRQHandler+0x10>)
 8000ea6:	f001 f80d 	bl	8001ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000a4 	.word	0x200000a4

08000eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <blinkLED>:
 *      Author: phucd
 */

#include "timer_task.h"

void blinkLED(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <blinkLED+0x1c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d104      	bne.n	8000ed6 <blinkLED+0x16>
		setTimer3(100);
 8000ecc:	2064      	movs	r0, #100	; 0x64
 8000ece:	f7ff fed7 	bl	8000c80 <setTimer3>

		// TODO:
			//Blink LED:
		toggleRed();
 8000ed2:	f7ff fbd5 	bl	8000680 <toggleRed>
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000008c 	.word	0x2000008c

08000ee0 <count_down>:

void count_down(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	if(timer1_flag == 1){
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <count_down+0x24>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d109      	bne.n	8000f00 <count_down+0x20>
		setTimer1(100);
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f7ff feb3 	bl	8000c58 <setTimer1>

		// TODO:
		counter -= 1;
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <count_down+0x28>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <count_down+0x28>)
 8000efa:	6013      	str	r3, [r2, #0]
		check_counter();
 8000efc:	f7ff fa8a 	bl	8000414 <check_counter>
	}
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000007c 	.word	0x2000007c
 8000f08:	20000078 	.word	0x20000078

08000f0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f32:	f7ff ffbf 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f001 fb0d 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f3a:	f7ff fd73 	bl	8000a24 <main>
  bx lr
 8000f3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f48:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 8000f4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f50:	200000f0 	.word	0x200000f0

08000f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_2_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x28>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x28>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f923 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff ff16 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40022000 	.word	0x40022000

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f93b 	bl	800121e <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f000 f903 	bl	80011ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a03      	ldr	r2, [pc, #12]	; (8001004 <HAL_IncTick+0x20>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	2000000c 	.word	0x2000000c
 8001004:	200000ec 	.word	0x200000ec

08001008 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	200000ec 	.word	0x200000ec

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <__NVIC_EnableIRQ+0x34>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff90 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff2d 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff42 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff90 	bl	800110c <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5f 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff35 	bl	8001080 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa2 	bl	8001170 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b08b      	sub	sp, #44	; 0x2c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e148      	b.n	80014de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800124c:	2201      	movs	r2, #1
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8137 	bne.w	80014d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4aa3      	ldr	r2, [pc, #652]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d05e      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001274:	4aa1      	ldr	r2, [pc, #644]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d875      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800127a:	4aa1      	ldr	r2, [pc, #644]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d058      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001280:	4a9f      	ldr	r2, [pc, #636]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d86f      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001286:	4a9f      	ldr	r2, [pc, #636]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d052      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 800128c:	4a9d      	ldr	r2, [pc, #628]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d869      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001292:	4a9d      	ldr	r2, [pc, #628]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d04c      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001298:	4a9b      	ldr	r2, [pc, #620]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d863      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800129e:	4a9b      	ldr	r2, [pc, #620]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d046      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 80012a4:	4a99      	ldr	r2, [pc, #612]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d85d      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d82a      	bhi.n	8001304 <HAL_GPIO_Init+0xcc>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d859      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_GPIO_Init+0x80>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	08001333 	.word	0x08001333
 80012bc:	0800130d 	.word	0x0800130d
 80012c0:	0800131f 	.word	0x0800131f
 80012c4:	08001361 	.word	0x08001361
 80012c8:	08001367 	.word	0x08001367
 80012cc:	08001367 	.word	0x08001367
 80012d0:	08001367 	.word	0x08001367
 80012d4:	08001367 	.word	0x08001367
 80012d8:	08001367 	.word	0x08001367
 80012dc:	08001367 	.word	0x08001367
 80012e0:	08001367 	.word	0x08001367
 80012e4:	08001367 	.word	0x08001367
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001367 	.word	0x08001367
 80012f4:	08001367 	.word	0x08001367
 80012f8:	08001367 	.word	0x08001367
 80012fc:	08001315 	.word	0x08001315
 8001300:	08001329 	.word	0x08001329
 8001304:	4a82      	ldr	r2, [pc, #520]	; (8001510 <HAL_GPIO_Init+0x2d8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130a:	e02c      	b.n	8001366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e029      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	623b      	str	r3, [r7, #32]
          break;
 800131c:	e024      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	3308      	adds	r3, #8
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e01f      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	330c      	adds	r3, #12
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e01a      	b.n	8001368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133a:	2304      	movs	r3, #4
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e013      	b.n	8001368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	611a      	str	r2, [r3, #16]
          break;
 8001352:	e009      	b.n	8001368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	615a      	str	r2, [r3, #20]
          break;
 800135e:	e003      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x130>
          break;
 8001366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2bff      	cmp	r3, #255	; 0xff
 800136c:	d801      	bhi.n	8001372 <HAL_GPIO_Init+0x13a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_Init+0x13e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d802      	bhi.n	8001384 <HAL_GPIO_Init+0x14c>
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x152>
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	3b08      	subs	r3, #8
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	210f      	movs	r1, #15
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	6a39      	ldr	r1, [r7, #32]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8090 	beq.w	80014d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b8:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b53      	ldr	r3, [pc, #332]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d0:	4a51      	ldr	r2, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a49      	ldr	r2, [pc, #292]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_Init+0x1e0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x1dc>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a47      	ldr	r2, [pc, #284]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_Init+0x1d8>
 800140c:	2302      	movs	r3, #2
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001410:	2303      	movs	r3, #3
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001418:	2300      	movs	r3, #0
 800141a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800142a:	493b      	ldr	r1, [pc, #236]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	4933      	ldr	r1, [pc, #204]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800145c:	4013      	ands	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	492d      	ldr	r1, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4929      	ldr	r1, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001484:	4013      	ands	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4923      	ldr	r1, [pc, #140]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4919      	ldr	r1, [pc, #100]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4915      	ldr	r1, [pc, #84]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3301      	adds	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f aeaf 	bne.w	800124c <HAL_GPIO_Init+0x14>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	372c      	adds	r7, #44	; 0x2c
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	10320000 	.word	0x10320000
 8001500:	10310000 	.word	0x10310000
 8001504:	10220000 	.word	0x10220000
 8001508:	10210000 	.word	0x10210000
 800150c:	10120000 	.word	0x10120000
 8001510:	10110000 	.word	0x10110000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00
 8001524:	40011000 	.word	0x40011000
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e001      	b.n	800154e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]
 8001566:	4613      	mov	r3, r2
 8001568:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156a:	787b      	ldrb	r3, [r7, #1]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001576:	e003      	b.n	8001580 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	611a      	str	r2, [r3, #16]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159c:	887a      	ldrh	r2, [r7, #2]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	041a      	lsls	r2, r3, #16
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	400b      	ands	r3, r1
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	611a      	str	r2, [r3, #16]
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e26c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8087 	beq.w	80016ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015dc:	4b92      	ldr	r3, [pc, #584]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d00c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015e8:	4b8f      	ldr	r3, [pc, #572]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d112      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
 80015f4:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d10b      	bne.n	800161a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001602:	4b89      	ldr	r3, [pc, #548]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x12c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d168      	bne.n	80016e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e246      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x76>
 8001624:	4b80      	ldr	r3, [pc, #512]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a7f      	ldr	r2, [pc, #508]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e02e      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a77      	ldr	r2, [pc, #476]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0xbc>
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a71      	ldr	r2, [pc, #452]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xd4>
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a67      	ldr	r2, [pc, #412]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fcb6 	bl	8001008 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcb2 	bl	8001008 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1fa      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xe4>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fca2 	bl	8001008 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc9e 	bl	8001008 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1e6      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x10c>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1ba      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4939      	ldr	r1, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fc57 	bl	8001008 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc53 	bl	8001008 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e19b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4927      	ldr	r1, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fc36 	bl	8001008 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc32 	bl	8001008 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e17a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03a      	beq.n	8001840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc16 	bl	8001008 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc12 	bl	8001008 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e15a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 faa6 	bl	8001d50 <RCC_Delay>
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fbfc 	bl	8001008 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	e00f      	b.n	8001834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fbf8 	bl	8001008 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d908      	bls.n	8001834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e140      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	42420000 	.word	0x42420000
 8001830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1e9      	bne.n	8001814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a6 	beq.w	800199a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b94      	ldr	r3, [pc, #592]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a93      	ldr	r2, [pc, #588]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b91      	ldr	r3, [pc, #580]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a8a      	ldr	r2, [pc, #552]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fbb9 	bl	8001008 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff fbb5 	bl	8001008 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	; 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0fd      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x4f8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x312>
 80018c0:	4b7b      	ldr	r3, [pc, #492]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4a7a      	ldr	r2, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	e02d      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x334>
 80018d6:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a75      	ldr	r2, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4b73      	ldr	r3, [pc, #460]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a72      	ldr	r2, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e01c      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d10c      	bne.n	8001912 <HAL_RCC_OscConfig+0x356>
 80018f8:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a6c      	ldr	r2, [pc, #432]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a69      	ldr	r2, [pc, #420]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	e00b      	b.n	800192a <HAL_RCC_OscConfig+0x36e>
 8001912:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a66      	ldr	r2, [pc, #408]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d015      	beq.n	800195e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb69 	bl	8001008 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff fb65 	bl	8001008 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0ab      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCC_OscConfig+0x37e>
 800195c:	e014      	b.n	8001988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fb53 	bl	8001008 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fb4f 	bl	8001008 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e095      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198e:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a47      	ldr	r2, [pc, #284]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8081 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a4:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d061      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d146      	bne.n	8001a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCC_OscConfig+0x4fc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fb23 	bl	8001008 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fb1f 	bl	8001008 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e067      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a19      	ldr	r1, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	430b      	orrs	r3, r1
 8001a12:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x4fc>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff faf3 	bl	8001008 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff faef 	bl	8001008 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e037      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46a>
 8001a44:	e02f      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_RCC_OscConfig+0x4fc>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fadc 	bl	8001008 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fad8 	bl	8001008 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e020      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x498>
 8001a72:	e018      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e013      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	42420060 	.word	0x42420060

08001abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d0      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d910      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4965      	ldr	r1, [pc, #404]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d040      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e073      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e06b      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4936      	ldr	r1, [pc, #216]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bac:	f7ff fa2c 	bl	8001008 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff fa28 	bl	8001008 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e053      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d210      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4922      	ldr	r1, [pc, #136]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1cc>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f98a 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	080025d4 	.word	0x080025d4
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	20000008 	.word	0x20000008

08001c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b490      	push	{r4, r7}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c98:	1d3c      	adds	r4, r7, #4
 8001c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ca0:	f240 2301 	movw	r3, #513	; 0x201
 8001ca4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cba:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cce:	e02d      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd2:	623b      	str	r3, [r7, #32]
      break;
 8001cd4:	e02d      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	0c9b      	lsrs	r3, r3, #18
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ce8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	0c5b      	lsrs	r3, r3, #17
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d02:	4413      	add	r3, r2
 8001d04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d0e:	fb02 f203 	mul.w	r2, r2, r3
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1a:	e004      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	623b      	str	r3, [r7, #32]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2e:	623b      	str	r3, [r7, #32]
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	6a3b      	ldr	r3, [r7, #32]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc90      	pop	{r4, r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	080025c4 	.word	0x080025c4
 8001d44:	40021000 	.word	0x40021000
 8001d48:	007a1200 	.word	0x007a1200
 8001d4c:	003d0900 	.word	0x003d0900

08001d50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <RCC_Delay+0x34>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <RCC_Delay+0x38>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a5b      	lsrs	r3, r3, #9
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d6c:	bf00      	nop
  }
  while (Delay --);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	60fa      	str	r2, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f9      	bne.n	8001d6c <RCC_Delay+0x1c>
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000004 	.word	0x20000004
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e041      	b.n	8001e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff f828 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 fa6a 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d001      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e035      	b.n	8001eb0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a16      	ldr	r2, [pc, #88]	; (8001ebc <HAL_TIM_Base_Start_IT+0x90>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_TIM_Base_Start_IT+0x4e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_TIM_Base_Start_IT+0x4e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_TIM_Base_Start_IT+0x94>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d010      	beq.n	8001eae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	e007      	b.n	8001eae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40000400 	.word	0x40000400

08001ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d122      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d11b      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0202 	mvn.w	r2, #2
 8001ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f9b1 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f9a4 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f9b3 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d122      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0204 	mvn.w	r2, #4
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f987 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f97a 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f989 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0208 	mvn.w	r2, #8
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f95d 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f950 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f95f 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b10      	cmp	r3, #16
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0210 	mvn.w	r2, #16
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f933 	bl	800226e <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f926 	bl	800225c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f935 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0201 	mvn.w	r2, #1
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7fe fdf6 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fa67 	bl	8002542 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8f9 	bl	8002292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0220 	mvn.w	r2, #32
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa32 	bl	8002530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_TIM_ConfigClockSource+0x18>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e0b3      	b.n	8002254 <HAL_TIM_ConfigClockSource+0x180>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800210a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002112:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002124:	d03e      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xd0>
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212a:	f200 8087 	bhi.w	800223c <HAL_TIM_ConfigClockSource+0x168>
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	f000 8085 	beq.w	8002240 <HAL_TIM_ConfigClockSource+0x16c>
 8002136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213a:	d87f      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800213c:	2b70      	cmp	r3, #112	; 0x70
 800213e:	d01a      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xa2>
 8002140:	2b70      	cmp	r3, #112	; 0x70
 8002142:	d87b      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d050      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x116>
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d877      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800214c:	2b50      	cmp	r3, #80	; 0x50
 800214e:	d03c      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0xf6>
 8002150:	2b50      	cmp	r3, #80	; 0x50
 8002152:	d873      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d058      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x136>
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d86f      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800215c:	2b30      	cmp	r3, #48	; 0x30
 800215e:	d064      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
 8002160:	2b30      	cmp	r3, #48	; 0x30
 8002162:	d86b      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 8002164:	2b20      	cmp	r3, #32
 8002166:	d060      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
 8002168:	2b20      	cmp	r3, #32
 800216a:	d867      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x168>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d05c      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
 8002170:	2b10      	cmp	r3, #16
 8002172:	d05a      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002174:	e062      	b.n	800223c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f000 f95c 	bl	8002442 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002198:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	609a      	str	r2, [r3, #8]
      break;
 80021a2:	e04e      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f000 f945 	bl	8002442 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c6:	609a      	str	r2, [r3, #8]
      break;
 80021c8:	e03b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 f8bc 	bl	8002354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2150      	movs	r1, #80	; 0x50
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f913 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 80021e8:	e02b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f000 f8da 	bl	80023b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2160      	movs	r1, #96	; 0x60
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f903 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002208:	e01b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	461a      	mov	r2, r3
 8002218:	f000 f89c 	bl	8002354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2140      	movs	r1, #64	; 0x40
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8f3 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002228:	e00b      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f000 f8ea 	bl	800240e <TIM_ITRx_SetConfig>
        break;
 800223a:	e002      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002240:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a25      	ldr	r2, [pc, #148]	; (800234c <TIM_Base_SetConfig+0xa8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x28>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x28>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <TIM_Base_SetConfig+0xac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <TIM_Base_SetConfig+0xa8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <TIM_Base_SetConfig+0x52>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d003      	beq.n	80022f6 <TIM_Base_SetConfig+0x52>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a17      	ldr	r2, [pc, #92]	; (8002350 <TIM_Base_SetConfig+0xac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <TIM_Base_SetConfig+0xa8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400

08002354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800237e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f023 030a 	bic.w	r3, r3, #10
 8002390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	621a      	str	r2, [r3, #32]
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f023 0210 	bic.w	r2, r3, #16
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	f043 0307 	orr.w	r3, r3, #7
 8002430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	021a      	lsls	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	431a      	orrs	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e041      	b.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d004      	beq.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10c      	bne.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40000400 	.word	0x40000400

08002530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4d0c      	ldr	r5, [pc, #48]	; (800258c <__libc_init_array+0x38>)
 800255a:	4c0d      	ldr	r4, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	f000 f822 	bl	80025ac <_init>
 8002568:	2600      	movs	r6, #0
 800256a:	4d0a      	ldr	r5, [pc, #40]	; (8002594 <__libc_init_array+0x40>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f855 3b04 	ldr.w	r3, [r5], #4
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	f855 3b04 	ldr.w	r3, [r5], #4
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	080025e4 	.word	0x080025e4
 8002590:	080025e4 	.word	0x080025e4
 8002594:	080025e4 	.word	0x080025e4
 8002598:	080025e8 	.word	0x080025e8

0800259c <memset>:
 800259c:	4603      	mov	r3, r0
 800259e:	4402      	add	r2, r0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	f803 1b01 	strb.w	r1, [r3], #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <_init>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr

080025b8 <_fini>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr
